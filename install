#!/usr/bin/env bash
#
# install: Installs dotfiles and dependencies.
#
# Author: @vvhybe
# Maintainer: @vvhybe
# License: GPL-3.0

readonly VERSION="v1.0.0"

# Dependencies
readonly DEPS=(
    "git"
    "curl"
)

DOTFILES_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
DISTRO_DEPS_DIR="$DOTFILES_DIR/deps"

# Script Manual
usage() {
    cat <<EOF
This script is intended to install dotfiles and dependencies.
across diffrent Linux distros.

Supported distros:

- Arch
- Ubuntu

Options:
  -h, --help      Show this help message and exit.
  -v, --version   Show the script version and exit.
  --deps          List all dependencies for this script (pipe-friendly).

Report bugs to: <https://github.com/vvhybe/dotfiles/issues>
EOF
}


# Function to list dependencies (pipe-friendly)
list_deps() {
  if [[ ${#DEPS[@]} -eq 0 ]]; then
    echo "This script has no dependencies."
    return 0
  fi

  for dep in "${DEPS[@]}"; do
    echo "$dep"
  done
}


# Parse command-line arguments
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
    case "$1" in
        -h | --help)
            usage
            exit 0
            ;;
        -v | --version)
            echo "${0##*/} $VERSION"
            exit 0
            ;;
        --deps)
            list_deps
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
    shift
done
if [[ "$1" == "--" ]]; then shift; fi


# Detect distribution
if command -v apt &> /dev/null; then
    DISTRO="debian"
elif command -v pacman &> /dev/null; then
    DISTRO="arch"
elif command -v dnf &> /dev/null; then
    DISTRO="fedora"
else
    echo "Unsupported distribution"
    exit 1
fi

# Ensure Homebrew is installed globally
ensure_brew() {
    if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew (cross-distro fallback)..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # Add Homebrew to PATH for current session and future shells
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
    fi
}
ensure_brew

# Load distro-specific install logic
source "$DOTFILES_DIR/deps/$DISTRO/pkgm.sh"

# Function to check if a file/dir is ignored by .dotignore
is_ignored() {
    local item="$1"
    local ignore_file="$DOTFILES_DIR/.dotignore"

    if [ ! -f "$ignore_file" ]; then
        return 1  # Not ignored
    fi

    local rel_path="${item#$DOTFILES_DIR/}"
    while IFS= read -r pattern; do
        [[ -z "$pattern" || "$pattern" == \#* ]] && continue
        if [[ "$rel_path" == $pattern ]]; then
            return 0  # Ignored
        fi
    done < "$ignore_file"
    return 1  # Not ignored
}


# Function to recursively symlink files
link_files() {
    local src_dir="$1"
    local dest_dir="$2"

    mkdir -p "$dest_dir"

    for item in "$src_dir"/*; do
        local item_name=$(basename "$item")
        local dest_item="$dest_dir/$item_name"

        if is_ignored "$item"; then
            echo "Ignored: $item"
            continue
        fi

        # Handle distro-specific files
        if [[ "$item_name" == *."$DISTRO" ]]; then
            local base_name="${item_name%.*}"
            dest_item="$dest_dir/$base_name"
        fi

        # Skip non-matching distro-specific files
        if [[ "$item_name" == *.* ]] && [[ "$item_name" != *."$DISTRO" ]]; then
            continue
        fi

        if [ -d "$item" ]; then
            link_files "$item" "$dest_item"
        elif [ -f "$item" ]; then
             ln -sf "$item" "$dest_item"
            echo "Symlinked: $item â†’ $dest_item"
        fi
    done
}


# Symlink al el files from dotfiles to home
link_files "$DOTFILES_DIR" "$HOME"

# Install all packages from deps.txt
while IFS= read -r pkg; do
    [[ -z "$pkg" || "$pkg" == \#* ]] && continue  # Skip empty lines/comments
    echo "Installing $pkg..."
    install_pkg "$pkg"
done < "$DOTFILES_DIR/deps/$DISTRO/deps.txt"

echo "Dotfiles and dependencies installed!"
